Pass
{
    $splice(PassName)
    Tags
    {
        $splice(LightMode)
    }

    // Debug
    $splice(Debug)

    // --------------------------------------------------
    // Pass

	Lighting Off
	Blend One Zero

	HLSLPROGRAM
	#include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"
	#undef SAMPLE_DEPTH_TEXTURE
	#undef SAMPLE_DEPTH_TEXTURE_LOD
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
	#include "Packages/com.unity.shadergraph/Editor/Generation/Targets/CustomRenderTexture/CustomTexture.hlsl"
	#include "Packages/com.unity.shadergraph/Editor/Generation/Targets/CustomRenderTexture/CustomTextureGraph.hlsl"
	#pragma vertex CustomRenderTextureVertexShader
	#pragma fragment frag
	#pragma target 4.5

    // Pragmas
    $splice(PassPragmas)

    // Keywords
    $splice(PassKeywords)
    $splice(GraphKeywords)

	struct SurfaceDescriptionInputs
	{
		// update input values
		float4	uv0;
		float4	uv1;
		uint	primitiveID;
		float3	direction;

		// ShaderGraph accessors:
		float3 WorldSpaceViewDirection;
		float3 TimeParameters;
		float3 WorldSpaceNormal;
		float2 NDCPosition;
		float4 ScreenPosition;
	};

	SurfaceDescriptionInputs ConvertV2FToSurfaceInputs( v2f_customrendertexture IN )
	{
		SurfaceDescriptionInputs o;
		
		o.uv0 = float4(IN.localTexcoord, 0);
		o.uv1 = float4(IN.globalTexcoord, 0);
		o.primitiveID = IN.primitiveID;
		o.direction = normalize(IN.direction);

		// other space of view direction are not supported
		$SurfaceDescriptionInputs.WorldSpaceViewDirection:					o.WorldSpaceViewDirection = o.direction;
		$SurfaceDescriptionInputs.TimeParameters:							o.TimeParameters = float3(_Time.y, _SinTime.x, _CosTime.y);
		$SurfaceDescriptionInputs.WorldSpaceNormal:                         o.WorldSpaceNormal = o.direction;
		$SurfaceDescriptionInputs.NDCPosition:                              o.NDCPosition = o.uv0.xy;
		$SurfaceDescriptionInputs.ScreenPosition:                           o.ScreenPosition = float4(o.uv0.xy, 0, 1);

		return o;
	}

	// --------------------------------------------------
	// Graph

	// Graph Properties
	$splice(GraphProperties)

	// Graph Includes
	$splice(GraphIncludes)

	// Graph Functions
	$splice(GraphFunctions)

	// Graph Pixel
	$splice(GraphPixel)

	float4 frag(v2f_customrendertexture IN) : COLOR
	{
		SurfaceDescriptionInputs surfaceInput = ConvertV2FToSurfaceInputs(IN);
		SurfaceDescription surface = SurfaceDescriptionFunction(surfaceInput);

		return float4(surface.BaseColor, surface.Alpha);
	}
	ENDHLSL
}
